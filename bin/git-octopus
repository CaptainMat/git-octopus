#!/bin/bash
usage() {
cat <<EOF
usage: git octopus [options] [<pattern>...]

    -n     leaves the repository back to HEAD
EOF
}

line_break(){
    echo "-----------------------------------------------------------"
}

# Save the current state of the repository in $triggeredBranch
triggeredBranch=`git symbolic-ref HEAD 2> /dev/null`
if [ $? -eq 0 ] ; then
    triggeredBranch=${triggeredBranch#refs/heads/}
else
    triggeredBranch=`git rev-parse HEAD`
fi

resetRepository(){
    git reset -q --hard
    git checkout -q $triggeredBranch
}

trap "resetRepository && exit 1;" SIGINT SIGQUIT

doCommit=`git config octopus.commit`

while getopts "nh" opt; do
  case "$opt" in
    h)
      usage
      exit 0
      ;;
    n)
      doCommit=false
      ;;
    \?)
      echo "Invalid option: -$opt" >&2
      exit 1
      ;;
  esac
done

if [[ -n `git diff-index HEAD` ]]
then
    echo "The repository has to be clean"
    exit 1
fi

#Shift all options in order to iterate over refspec-patterns
shift `expr $OPTIND - 1`

#Retrive patterns written in the conf
patterns=`git config --get-all octopus.pattern`

#Overriding the conf with the patterns given as parameters
if [[ -n "$@" ]] ; then
    patterns=$@
fi

#Exit code 0 if nothing to merge
if [[ -z "$patterns" ]] ; then
    exit 0
fi

branches=`git ls-remote . $patterns | cut -d $'\t' -f 2`

echo "Branches beeing merged :"
for branch in $branches ; do
    echo $'\t'$branch
done

line_break

if ! $doCommit ; then
    mergeArg="--no-commit"
fi

mergeBases= sha1s= octopusMessage=
for branch in $branches
do
    if [[ `git rev-parse $branch` != `git rev-parse $triggeredBranch` ]]
    then
        sha1=$(git rev-parse --verify "$branch")
        sha1s="$sha1s $sha1"
        eval GITHEAD_$sha1='"$branch"'
        export GITHEAD_$sha1
        
        mergeBases="$mergeBases`git merge-base --all HEAD $branch` "

        octopusMessage="$octopusMessage$branch
"
    fi
done

if [ -z $sha1s ] ; then
    echo "OCTOPUS SUCCESS"
    exit 0;
fi

git-merge-octopus-fork.sh $mergeBases -- HEAD $sha1s

if [ $? -eq 0 ]
then
    if $doCommit ; then
        tree=`git write-tree`
        head=$(git rev-parse --verify HEAD)
        commit=`git commit-tree -p $head ${sha1s// / -p } -m "$octopusMessage" $tree`
        git update-ref HEAD $commit
    else
        git reset -q --hard
    fi
    line_break
    echo "OCTOPUS SUCCESS"
else
    # Octopus merge failed, starting to run the analysis sequence ...
    line_break
   
    git reset -q --hard HEAD

    echo "Testing merges one by one with $triggeredBranch..."
    echo

    tmpFile=`mktemp -t octopus-conflicts-outputXXXX`

    # Will perform a simple merge from the current branch with each branches one by one.
    for branch in $branches
    do
        if [[ `git rev-parse $branch` != `git rev-parse $triggeredBranch` ]]
        then
            echo -n "merging $branch... "

            #computing the best common ancestor to base the merge with
            mergeBase=`git merge-base --all HEAD $branch`

            git-merge-octopus-fork.sh $mergeBase -- HEAD `git rev-parse --verify $branch` > /dev/null

            if [ $? -eq 0 ]
            then
                echo "SUCCESS"
            else
                echo "FAILED"
                cat $tmpFile
                git diff
                conflicts+="$branch "
            fi
            git reset -q --hard
        fi
    done
    
    line_break

    if [ -z "$conflicts" ]; then
        echo "No conflicts found between $triggeredBranch and the rest of the branches"
    else
        echo "$triggeredBranch has conflicts with :"
        for branch in $conflicts
        do
            echo $'\t'$branch
        done
    fi

    echo "OCTOPUS FAILED"
    exit 1
fi
